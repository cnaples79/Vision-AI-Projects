# -*- coding: utf-8 -*-
"""Object Detection in Videos POC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19l_fnwkfXpjZTPzZYUzY3H0je0dflrAv

<div align="center">

  <a href="https://ultralytics.com/yolov5" target="_blank">
    <img width="1024", src="https://raw.githubusercontent.com/ultralytics/assets/main/yolov5/v70/splash.png"></a>

[‰∏≠Êñá](https://docs.ultralytics.com/zh/) | [ÌïúÍµ≠Ïñ¥](https://docs.ultralytics.com/ko/) | [Êó•Êú¨Ë™û](https://docs.ultralytics.com/ja/) | [–†—É—Å—Å–∫–∏–π](https://docs.ultralytics.com/ru/) | [Deutsch](https://docs.ultralytics.com/de/) | [Fran√ßais](https://docs.ultralytics.com/fr/) | [Espa√±ol](https://docs.ultralytics.com/es/) | [Portugu√™s](https://docs.ultralytics.com/pt/) | [‡§π‡§ø‡§®‡•ç‡§¶‡•Ä](https://docs.ultralytics.com/hi/) | [ÿßŸÑÿπÿ±ÿ®Ÿäÿ©](https://docs.ultralytics.com/ar/)

  <a href="https://bit.ly/yolov5-paperspace-notebook"><img src="https://assets.paperspace.io/img/gradient-badge.svg" alt="Run on Gradient"></a>
  <a href="https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a>
  <a href="https://www.kaggle.com/ultralytics/yolov5"><img src="https://kaggle.com/static/images/open-in-kaggle.svg" alt="Open In Kaggle"></a>

This <a href="https://github.com/ultralytics/yolov5">YOLOv5</a> üöÄ notebook by <a href="https://ultralytics.com">Ultralytics</a> presents simple train, validate and predict examples to help start your AI adventure.<br>We hope that the resources in this notebook will help you get the most out of YOLOv5. Please browse the YOLOv5 <a href="https://docs.ultralytics.com/yolov5">Docs</a> for details, raise an issue on <a href="https://github.com/ultralytics/yolov5">GitHub</a> for support, and join our <a href="https://ultralytics.com/discord">Discord</a> community for questions and discussions!

</div>

# Setup

Clone GitHub [repository](https://github.com/ultralytics/yolov5), install [dependencies](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) and check PyTorch and GPU.
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5  # clone
# %cd yolov5
# %pip install -qr requirements.txt comet_ml  # install

import torch
import utils
display = utils.notebook_init()  # checks

"""# 1. Detect

`detect.py` runs YOLOv5 inference on a variety of sources, downloading models automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases), and saving results to `runs/detect`. Example inference sources are:

```shell
python detect.py --source 0  # webcam
                          img.jpg  # image
                          vid.mp4  # video
                          screen  # screenshot
                          path/  # directory
                         'path/*.jpg'  # glob
                         'https://youtu.be/LNwODJXcvt4'  # YouTube
                         'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream
```
"""

!python detect.py --weights yolov5s.pt --classes 67 --conf 0.10 --source data/videos --save-crop
# display.Image(filename='runs/detect/exp/zidane.jpg', width=600)

"""&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<img align="left" src="https://user-images.githubusercontent.com/26833433/127574988-6a558aa1-d268-44b9-bf6b-62d4c605cc72.jpg" width="600">

# 2. Validate
Validate a model's accuracy on the [COCO](https://cocodataset.org/#home) dataset's `val` or `test` splits. Models are downloaded automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases). To show results by class use the `--verbose` flag.
"""

# Download COCO val
torch.hub.download_url_to_file('https://ultralytics.com/assets/coco2017val.zip', 'tmp.zip')  # download (780M - 5000 images)
!unzip -q tmp.zip -d ../datasets && rm tmp.zip  # unzip

# Validate YOLOv5s on COCO val
!python val.py --weights yolov5s.pt --data coco.yaml --img 640 --half

"""# 3. Train

<p align=""><a href="https://bit.ly/ultralytics_hub"><img width="1000" src="https://github.com/ultralytics/assets/raw/main/im/integrations-loop.png"/></a></p>
Close the active learning loop by sampling images from your inference conditions with the `roboflow` pip package
<br><br>

Train a YOLOv5s model on the [COCO128](https://www.kaggle.com/ultralytics/coco128) dataset with `--data coco128.yaml`, starting from pretrained `--weights yolov5s.pt`, or from randomly initialized `--weights '' --cfg yolov5s.yaml`.

- **Pretrained [Models](https://github.com/ultralytics/yolov5/tree/master/models)** are downloaded
automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases)
- **[Datasets](https://github.com/ultralytics/yolov5/tree/master/data)** available for autodownload include: [COCO](https://github.com/ultralytics/yolov5/blob/master/data/coco.yaml), [COCO128](https://github.com/ultralytics/yolov5/blob/master/data/coco128.yaml), [VOC](https://github.com/ultralytics/yolov5/blob/master/data/VOC.yaml), [Argoverse](https://github.com/ultralytics/yolov5/blob/master/data/Argoverse.yaml), [VisDrone](https://github.com/ultralytics/yolov5/blob/master/data/VisDrone.yaml), [GlobalWheat](https://github.com/ultralytics/yolov5/blob/master/data/GlobalWheat2020.yaml), [xView](https://github.com/ultralytics/yolov5/blob/master/data/xView.yaml), [Objects365](https://github.com/ultralytics/yolov5/blob/master/data/Objects365.yaml), [SKU-110K](https://github.com/ultralytics/yolov5/blob/master/data/SKU-110K.yaml).
- **Training Results** are saved to `runs/train/` with incrementing run directories, i.e. `runs/train/exp2`, `runs/train/exp3` etc.
<br>

A **Mosaic Dataloader** is used for training which combines 4 images into 1 mosaic.

## Label a dataset on Roboflow (optional)

[Roboflow](https://roboflow.com/?ref=ultralytics) enables you to easily **organize, label, and prepare** a high quality dataset with your own custom data. Roboflow also makes it easy to establish an active learning pipeline, collaborate with your team on dataset improvement, and integrate directly into your model building workflow with the `roboflow` pip package.
"""

# Commented out IPython magic to ensure Python compatibility.
#@title Select YOLOv5 üöÄ logger {run: 'auto'}
logger = 'Comet' #@param ['Comet', 'ClearML', 'TensorBoard']

if logger == 'Comet':
#   %pip install -q comet_ml
  import comet_ml; comet_ml.init()
elif logger == 'ClearML':
#   %pip install -q clearml
  import clearml; clearml.browser_login()
elif logger == 'TensorBoard':
#   %load_ext tensorboard
#   %tensorboard --logdir runs/train

# Train YOLOv5s on COCO128 for 3 epochs
!python train.py --img 640 --batch 16 --epochs 3 --data coco128.yaml --weights yolov5s.pt --cache

"""# 4. Visualize

## Comet Logging and Visualization üåü NEW

[Comet](https://www.comet.com/site/lp/yolov5-with-comet/?utm_source=yolov5&utm_medium=partner&utm_campaign=partner_yolov5_2022&utm_content=yolov5_colab) is now fully integrated with YOLOv5. Track and visualize model metrics in real time, save your hyperparameters, datasets, and model checkpoints, and visualize your model predictions with [Comet Custom Panels](https://www.comet.com/docs/v2/guides/comet-dashboard/code-panels/about-panels/?utm_source=yolov5&utm_medium=partner&utm_campaign=partner_yolov5_2022&utm_content=yolov5_colab)! Comet makes sure you never lose track of your work and makes it easy to share results and collaborate across teams of all sizes!

Getting started is easy:
```shell
pip install comet_ml  # 1. install
export COMET_API_KEY=<Your API Key>  # 2. paste API key
python train.py --img 640 --epochs 3 --data coco128.yaml --weights yolov5s.pt  # 3. train
```
To learn more about all of the supported Comet features for this integration, check out the [Comet Tutorial](https://docs.ultralytics.com/yolov5/tutorials/comet_logging_integration). If you'd like to learn more about Comet, head over to our [documentation](https://www.comet.com/docs/v2/?utm_source=yolov5&utm_medium=partner&utm_campaign=partner_yolov5_2022&utm_content=yolov5_colab). Get started by trying out the Comet Colab Notebook:
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1RG0WOQyxlDlo5Km8GogJpIEJlg_5lyYO?usp=sharing)

<a href="https://bit.ly/yolov5-readme-comet2">
<img alt="Comet Dashboard" src="https://user-images.githubusercontent.com/26833433/202851203-164e94e1-2238-46dd-91f8-de020e9d6b41.png" width="1280"/></a>

## ClearML Logging and Automation üåü NEW

[ClearML](https://cutt.ly/yolov5-notebook-clearml) is completely integrated into YOLOv5 to track your experimentation, manage dataset versions and even remotely execute training runs. To enable ClearML (check cells above):

- `pip install clearml`
- run `clearml-init` to connect to a ClearML server (**deploy your own [open-source server](https://github.com/allegroai/clearml-server)**, or use our [free hosted server](https://cutt.ly/yolov5-notebook-clearml))

You'll get all the great expected features from an experiment manager: live updates, model upload, experiment comparison etc. but ClearML also tracks uncommitted changes and installed packages for example. Thanks to that ClearML Tasks (which is what we call experiments) are also reproducible on different machines! With only 1 extra line, we can schedule a YOLOv5 training task on a queue to be executed by any number of ClearML Agents (workers).

You can use ClearML Data to version your dataset and then pass it to YOLOv5 simply using its unique ID. This will help you keep track of your data without adding extra hassle. Explore the [ClearML Tutorial](https://docs.ultralytics.com/yolov5/tutorials/clearml_logging_integration) for details!

<a href="https://cutt.ly/yolov5-notebook-clearml">
<img alt="ClearML Experiment Management UI" src="https://github.com/thepycoder/clearml_screenshots/raw/main/scalars.jpg" width="1280"/></a>

## Local Logging

Training results are automatically logged with [Tensorboard](https://www.tensorflow.org/tensorboard) and [CSV](https://github.com/ultralytics/yolov5/pull/4148) loggers to `runs/train`, with a new experiment directory created for each new training as `runs/train/exp2`, `runs/train/exp3`, etc.

This directory contains train and val statistics, mosaics, labels, predictions and augmentated mosaics, as well as metrics and charts including precision-recall (PR) curves and confusion matrices.

<img alt="Local logging results" src="https://user-images.githubusercontent.com/26833433/183222430-e1abd1b7-782c-4cde-b04d-ad52926bf818.jpg" width="1280"/>

# Environments

YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):

- **Notebooks** with free GPU: <a href="https://bit.ly/yolov5-paperspace-notebook"><img src="https://assets.paperspace.io/img/gradient-badge.svg" alt="Run on Gradient"></a> <a href="https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a> <a href="https://www.kaggle.com/ultralytics/yolov5"><img src="https://kaggle.com/static/images/open-in-kaggle.svg" alt="Open In Kaggle"></a>
- **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://docs.ultralytics.com/yolov5/environments/google_cloud_quickstart_tutorial/)
- **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://docs.ultralytics.com/yolov5/environments/aws_quickstart_tutorial/)
- **Docker Image**. See [Docker Quickstart Guide](https://docs.ultralytics.com/yolov5/environments/docker_image_quickstart_tutorial/) <a href="https://hub.docker.com/r/ultralytics/yolov5"><img src="https://img.shields.io/docker/pulls/ultralytics/yolov5?logo=docker" alt="Docker Pulls"></a>

# Status

![YOLOv5 CI](https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml/badge.svg)

If this badge is green, all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 training ([train.py](https://github.com/ultralytics/yolov5/blob/master/train.py)), testing ([val.py](https://github.com/ultralytics/yolov5/blob/master/val.py)), inference ([detect.py](https://github.com/ultralytics/yolov5/blob/master/detect.py)) and export ([export.py](https://github.com/ultralytics/yolov5/blob/master/export.py)) on macOS, Windows, and Ubuntu every 24 hours and on every commit.

# Appendix

Additional content below.
"""

# YOLOv5 PyTorch HUB Inference (DetectionModels only)
import torch

model = torch.hub.load('ultralytics/yolov5', 'yolov5s', force_reload=True, trust_repo=True)  # or yolov5n - yolov5x6 or custom
im = 'https://ultralytics.com/images/zidane.jpg'  # file, Path, PIL.Image, OpenCV, nparray, list
results = model(im)  # inference
results.print()  # or .show(), .save(), .crop(), .pandas(), etc.

!pip install streamlit opencv-python-headless pyngrok

app_code = """
import streamlit as st
import os
from pathlib import Path
import cv2
import shutil
from PIL import Image

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    os.system(f'python detect.py --source {video_path} --classes 67 --conf 0.10 --save-txt --save-conf')

    # Gather detected frames
    detected_frames = []
    for subdir, dirs, files in os.walk(output_dir):
        for file in files:
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(subdir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.type.split("/")[1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    detected_frames = process_video(video_path)

    if detected_frames:
        st.write(f'Detected {len(detected_frames)} frames with cell phones.')

        collage_image = create_collage(detected_frames)
        if collage_image:
            st.image(collage_image, caption='Collage of detected frames')
    else:
        st.write('No cell phones detected in the video.')
"""

with open("app.py", "w") as file:
    file.write(app_code)

from pyngrok import ngrok
import os

# Start Streamlit app
os.system('streamlit run app.py &')

# Create a public URL for the Streamlit app
public_url = ngrok.connect(port='8501')
print(f'Streamlit app running at: {public_url}')

!streamlit run app.py & npx localtunnel --port 8501 --bypass-tunnel-reminder

import os
import threading

# Function to run Streamlit app
def run_streamlit():
    os.system('streamlit run app.py')

# Function to run LocalTunnel
def run_localtunnel():
    os.system('lt --port 8501 --print-requests')

# Start Streamlit app in a new thread
streamlit_thread = threading.Thread(target=run_streamlit)
streamlit_thread.start()

# Start LocalTunnel in a new thread
localtunnel_thread = threading.Thread(target=run_localtunnel)
localtunnel_thread.start()

import os
import threading

# Function to run Streamlit app
def run_streamlit():
    os.system('streamlit run app.py')

# Function to run LocalTunnel with bypass header
def run_localtunnel():
    os.system('lt --port 8501 --print-requests --bypass-tunnel-reminder')

# Start Streamlit app in a new thread
streamlit_thread = threading.Thread(target=run_streamlit)
streamlit_thread.start()

# Start LocalTunnel in a new thread
localtunnel_thread = threading.Thread(target=run_localtunnel)
localtunnel_thread.start()

import os
import threading

# Function to run Streamlit app
def run_streamlit():
    os.system('streamlit run app.py')

# Function to run LocalTunnel
def run_localtunnel():
    os.system('lt --port 8501 --print-requests')

# Start Streamlit app in a new thread
streamlit_thread = threading.Thread(target=run_streamlit)
streamlit_thread.start()

# Start LocalTunnel in a new thread
localtunnel_thread = threading.Thread(target=run_localtunnel)
localtunnel_thread.start()

import subprocess

# Start the Streamlit app in the background
subprocess.Popen(['streamlit', 'run', 'app.py'])

import time
import subprocess

# Wait a few seconds for the Streamlit app to start
time.sleep(5)

# Start LocalTunnel
localtunnel_process = subprocess.Popen(['lt', '--port', '8501'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Capture the LocalTunnel URL
for line in iter(localtunnel_process.stdout.readline, b''):
    print(line.decode().strip())
    if 'your url is:' in line.decode():
        public_url = line.decode().strip().split(' ')[-1]
        break

print(f'Streamlit app running at: {public_url}')

!npm install -g localtunnel

import requests
import time
import subprocess

# Wait a few seconds for the Streamlit app to start
time.sleep(5)

# Start LocalTunnel
localtunnel_process = subprocess.Popen(['lt', '--port', '8501'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Capture the LocalTunnel URL
public_url = None
for line in iter(localtunnel_process.stdout.readline, b''):
    decoded_line = line.decode().strip()
    print(decoded_line)
    if 'your url is:' in decoded_line:
        public_url = decoded_line.split(' ')[-1]
        break

if public_url:
    print(f'Streamlit app running at: {public_url}')

    # Make a request to the LocalTunnel URL with custom headers to bypass the password screen
    headers = {
        'User-Agent': 'custom-user-agent',
        'bypass-tunnel-reminder': '1'
    }
    response = requests.get(public_url, headers=headers)
    if response.status_code == 200:
        print(f'Access the Streamlit app at: {public_url}')
    else:
        print('Failed to bypass the password screen.')
else:
    print('Failed to create LocalTunnel.')

import requests
import time
import subprocess

# Wait a few seconds for the Streamlit app to start
time.sleep(5)

# Start LocalTunnel
localtunnel_process = subprocess.Popen(['lt', '--port', '8501'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Capture the LocalTunnel URL
public_url = None
for line in iter(localtunnel_process.stdout.readline, b''):
    decoded_line = line.decode().strip()
    print(decoded_line)
    if 'your url is:' in decoded_line:
        public_url = decoded_line.split(' ')[-1]
        break

if public_url:
    print(f'Streamlit app running at: {public_url}')

    # Make a request to the LocalTunnel URL with custom headers to bypass the password screen
    headers = {
        'User-Agent': 'Mozilla/5.0',
        'bypass-tunnel-reminder': '1'
    }
    response = requests.get(public_url, headers=headers)
    if response.status_code == 200:
        print(f'Access the Streamlit app at: {public_url}')
    else:
        print('Failed to bypass the password screen.')
else:
    print('Failed to create LocalTunnel.')

!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
!dpkg -i cloudflared-linux-amd64.deb

app_code = """
import streamlit as st
import os
import shutil
from PIL import Image

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    print(f'Running detect.py on {video_path}')
    os.system(f'python detect.py --source {video_path} --classes 67 --conf 0.10 --save-txt --save-conf')
    print('detect.py has finished running')

    # Gather detected frames
    detected_frames = []
    for subdir, dirs, files in os.walk(output_dir):
        for file in files:
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(subdir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.type.split("/")[1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    detected_frames = process_video(video_path)

    if detected_frames:
        st.write(f'Detected {len(detected_frames)} frames with cell phones.')

        collage_image = create_collage(detected_frames)
        if collage_image:
            st.image(collage_image, caption='Collage of detected frames')
    else:
        st.write('No cell phones detected in the video.')
"""

with open("app.py", "w") as file:
    file.write(app_code)

import os
import threading

# Function to run Streamlit app
def run_streamlit():
    os.system('streamlit run app.py')

# Function to run Cloudflared
def run_cloudflared():
    os.system('cloudflared tunnel --url http://localhost:8501')

# Start Streamlit app in a new thread
streamlit_thread = threading.Thread(target=run_streamlit)
streamlit_thread.start()

# Start Cloudflared in a new thread
cloudflared_thread = threading.Thread(target=run_cloudflared)
cloudflared_thread.start()

!wget -q -O - https://loca.lt/mytunnelpassword

app_code = """
import streamlit as st
import os
import shutil
from PIL import Image

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    print(f'Running detect.py on {video_path}')
    os.system(f'python detect.py --weights yolov5s.pt --source {video_path} --classes 67 --conf 0.10 --save-txt --save-conf')
    print('detect.py has finished running')

    # Gather detected frames
    detected_frames = []
    for subdir, dirs, files in os.walk(output_dir):
        for file in files:
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(subdir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.type.split("/")[1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    try:
        detected_frames = process_video(video_path)
        st.write('Inference completed.')

        if detected_frames:
            st.write(f'Detected {len(detected_frames)} frames with cell phones.')

            collage_image = create_collage(detected_frames)
            if collage_image:
                st.image(collage_image, caption='Collage of detected frames')
        else:
            st.write('No cell phones detected in the video.')
    except Exception as e:
        st.write(f'Error during inference: {e}')
"""

with open("app.py", "w") as file:
    file.write(app_code)

!pkill -f streamlit

import subprocess

# Start the Streamlit app in the background
subprocess.Popen(['streamlit', 'run', 'app.py'])

import requests
import time
import subprocess

# Wait a few seconds for the Streamlit app to start
time.sleep(5)

# Start LocalTunnel
localtunnel_process = subprocess.Popen(['lt', '--port', '8501'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Capture the LocalTunnel URL
public_url = None
for line in iter(localtunnel_process.stdout.readline, b''):
    decoded_line = line.decode().strip()
    print(decoded_line)
    if 'your url is:' in decoded_line:
        public_url = decoded_line.split(' ')[-1]
        break

if public_url:
    print(f'Streamlit app running at: {public_url}')

    # Make a request to the LocalTunnel URL with custom headers to bypass the password screen
    headers = {
        'User-Agent': 'Mozilla/5.0',
        'bypass-tunnel-reminder': '1'
    }
    response = requests.get(public_url, headers=headers)
    if response.status_code == 200:
        print(f'Access the Streamlit app at: {public_url}')
    else:
        print('Failed to bypass the password screen.')
else:
    print('Failed to create LocalTunnel.')

app_code = """
import streamlit as st
import os
import shutil
from PIL import Image
import subprocess

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    print(f'Running detect.py on {video_path}')
    result = subprocess.run(['python', 'detect.py', '--source', video_path, '--classes', '67', '--conf', '0.10', '--save-txt', '--save-conf', '--vid'], capture_output=True, text=True)
    print('detect.py has finished running')
    print(f'Stdout: {result.stdout}')
    print(f'Stderr: {result.stderr}')

    # Gather detected frames
    detected_frames = []
    for subdir, dirs, files in os.walk(output_dir):
        for file in files:
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(subdir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.type.split("/")[1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    try:
        detected_frames = process_video(video_path)
        st.write('Inference completed.')

        if detected_frames:
            st.write(f'Detected {len(detected_frames)} frames with cell phones.')

            collage_image = create_collage(detected_frames)
            if collage_image:
                st.image(collage_image, caption='Collage of detected frames')
        else:
            st.write('No cell phones detected in the video.')
    except Exception as e:
        st.write(f'Error during inference: {e}')
"""

with open("app.py", "w") as file:
    file.write(app_code)

app_code = """
import streamlit as st
import os
import shutil
from PIL import Image
import subprocess

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    print(f'Running detect.py on {video_path}')
    result = subprocess.run(['python', 'detect.py', '--source', video_path, '--classes', '67', '--conf', '0.10', '--save-txt', '--save-conf', '--weights', 'yolov5s.pt'], capture_output=True, text=True)
    print('detect.py has finished running')
    print(f'Stdout: {result.stdout}')
    print(f'Stderr: {result.stderr}')

    # Gather detected frames
    detected_frames = []
    for subdir, dirs, files in os.walk(output_dir):
        for file in files:
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(subdir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.name.split(".")[-1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    try:
        detected_frames = process_video(video_path)
        st.write('Inference completed.')

        if detected_frames:
            st.write(f'Detected {len(detected_frames)} frames with cell phones.')

            collage_image = create_collage(detected_frames)
            if collage_image:
                st.image(collage_image, caption='Collage of detected frames')
        else:
            st.write('No cell phones detected in the video.')
    except Exception as e:
        st.write(f'Error during inference: {e}')
"""

with open("app.py", "w") as file:
    file.write(app_code)

app_code = """
import streamlit as st
import os
import shutil
from PIL import Image
import subprocess

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect/exp'
    crops_dir = os.path.join(output_dir, 'crops', 'cell phone')  # Assuming 'cell_phone' is the directory for class 67
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    print(f'Running detect.py on {video_path}')
    command = ['python', 'detect.py', '--weights', 'yolov5s.pt', '--source', video_path, '--classes', '67', '--conf', '0.10', '--save-txt', '--save-conf', '--project', 'runs/detect', '--exist-ok', '--save-crop']
    result = subprocess.run(command, capture_output=True, text=True)
    print('detect.py has finished running')
    print(result.stdout)
    print(result.stderr)

    # Gather detected frames from the cell_phone directory
    detected_frames = []
    if os.path.exists(crops_dir):
        for file in os.listdir(crops_dir):
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(crops_dir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.type.split("/")[1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    try:
        detected_frames = process_video(video_path)
        st.write('Inference completed.')

        if detected_frames:
            st.write(f'Detected {len(detected_frames)} frames with cell phones.')

            collage_image = create_collage(detected_frames)
            if collage_image:
                st.image(collage_image, caption='Collage of detected frames')
        else:
            st.write('No cell phones detected in the video.')
    except Exception as e:
        st.write(f'Error during inference: {e}')
"""

with open("app.py", "w") as file:
    file.write(app_code)

print("app.py file has been written.")

app_code = """
import streamlit as st
import os
import shutil
from PIL import Image
import subprocess

# Ensure detect.py is present
assert os.path.exists('detect.py'), 'detect.py not found. Ensure it is in the current directory.'

def process_video(video_path):
    # Run detect.py on the uploaded video
    output_dir = 'runs/detect/exp'
    video_output = os.path.join(output_dir, 'uploaded_video.mp4')  # Adjust the filename as necessary
    crops_dir = os.path.join(output_dir, 'crops', 'cell phone')  # Assuming 'cell_phone' is the directory for class 67
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)  # Clear previous runs
    print(f'Running detect.py on {video_path}')
    command = ['python', 'detect.py', '--weights', 'yolov5s.pt', '--source', video_path, '--classes', '67', '--conf', '0.10', '--save-txt', '--save-conf', '--project', 'runs/detect', '--exist-ok', '--save-crop']
    result = subprocess.run(command, capture_output=True, text=True)
    print('detect.py has finished running')
    print(result.stdout)
    print(result.stderr)

    # Gather detected frames from the cell_phone directory
    detected_frames = []
    if os.path.exists(crops_dir):
        for file in os.listdir(crops_dir):
            if file.endswith(('.jpg', '.jpeg', '.png')):
                img_path = os.path.join(crops_dir, file)
                img = Image.open(img_path)
                detected_frames.append(img)
    return detected_frames, video_output

def create_collage(frames, cols=5):
    if len(frames) == 0:
        return None

    # Determine the size of the collage
    frame_width, frame_height = frames[0].size
    rows = (len(frames) + cols - 1) // cols

    collage_width = cols * frame_width
    collage_height = rows * frame_height

    # Create a blank collage
    collage = Image.new('RGB', (collage_width, collage_height))

    # Fill the collage with frames
    for idx, frame in enumerate(frames):
        row = idx // cols
        col = idx % cols
        collage.paste(frame, (col * frame_width, row * frame_height))

    return collage

# Streamlit app
st.title('YOLOv5 Cell Phone Detection in Videos')

uploaded_file = st.file_uploader('Upload a video file', type=['mp4', 'avi', 'mov'])

if uploaded_file is not None:
    video_path = f'uploaded_video.{uploaded_file.type.split("/")[1]}'
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.video(video_path)

    st.write('Running YOLOv5 inference...')

    try:
        detected_frames, annotated_video_path = process_video(video_path)
        st.write('Inference completed.')

        if detected_frames:
            st.write(f'Detected {len(detected_frames)} frames with cell phones.')

            collage_image = create_collage(detected_frames)
            if collage_image:
                st.image(collage_image, caption='Collage of detected frames')

        if os.path.exists(annotated_video_path):
            st.video(annotated_video_path, format='video/mp4', start_time=0)
        else:
            st.write('Annotated video not found.')

        if not detected_frames:
            st.write('No cell phones detected in the video.')
    except Exception as e:
        st.write(f'Error during inference: {e}')
"""

with open("app.py", "w") as file:
    file.write(app_code)

print("app.py file has been written.")